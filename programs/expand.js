// Harold Thimbleby, 2020-2023
// Javascript code to recursively expand TeX \input commands in files TeXFiles[] (see below for value)
// run as node generated/expand.js

'use strict';

var expandedPrefix = "EX";

var flattenGraphics = true;
// graphics files are put in the directory generated/ but some publishers can't cope, 
// so if flattenGraphics is true, the lines like
//
//    \includegraphics[width=\imageWidth]{generated/mathematicaplot.\imageFileSuffix}
//
// are converted to
//
//    \includegraphics[width=\imageWidth]{mathematicaplot.\imageFileSuffix}
//
// we also list all the relevant image files, as they will need copying out of the directory generated/

// Elsevier makes a mess of includegraphics, so this macro is expanded here
var REsuffixtofix = /.\\imageFileSuffix/,
    fixedSuffix = ".jpg";

// the files we will expand...
var TeXFiles = ["paper.tex", "appendix.tex"];

function makenote(whatsaying, vector) { 
    var files = "", expandedfiles = "";
    for( var i = 0; i < vector.length; i++ )
    {	files += i == 0? "": i < vector-1? ", ": ", and "; 
        files += vector[i];
        expandedfiles += i == 0? "": i < vector-1? ", ": ", and "; 
        expandedfiles += expandedPrefix+vector[i];
    }
	var plural = vector.length > 1;
	var warn = plural? "": "Please do not edit this file, "+expandedfiles+"!\nIt was generated automatically from its master file "+files+", by programs/expand.js\nGet everything from https://github.com/haroldthimbleby/improving-science\n\n";
	return warn+("This "+whatsaying+" expands //the /LaTeX file/s// ("+files+"), which /have/has/ complex dependencies,\n  to make //this /simple LaTeX file/s// ("+expandedfiles+")\n    that depend//s/ on nothing, apart from /their/its/ standard document class.\n      /The/This/ expanded file/s// depend//s/ on no other files, as instead\n        each required file's text was input and expanded recursively - search for '% expand' in the expanded file/s//// below/.\n\n(The original file/s// /are/is/ dependent on BibTeX (.bst and .bbl files), a macro file, table/s// of contents,\n  /their/its/ own and other files' .aux files,\n    as well as various data files in the directory generated\n      etc. All these file dependencies /are/have been/ removed.)\n").replace(/\/([^/]*)\/([^/]*)\//mg, plural?"$1":"$2");
}

console.log(makenote("app", TeXFiles));

console.log("NB Expanding \input and other commands is not done in file order.\n");

var fs = require('fs');

function saveFile(fileName, string) {
    fs.open(fileName, 'w', function (err, fd) {
        if (err) {
            if (err.code === 'EEXIST') {
                console.error(fileName + " can't be over-written");
                return;
            }
            console.error("** Some error trying to write " + fileName);
            throw err;
        }
        fs.writeFileSync(fd, string, function (err) {
            if (err) {
                return console.log("** Saving " + fileName + " got error: " + err);
            }
        })
    });
}

function getFile(file) {
	file = file.trim();
    try {
        return fs.readFileSync(file, {encoding:'utf8', flag:'r'});
    } catch (err) {
        console.log("** Can't read file " + file + " - " + err);
        return "\\error couldn't read " + file + "\n";
    }
}

var cpFiles = "# assuming \\imageFileSuffix is defined as jpg\n",
    cpFileCount = 0;

var REinput = RegExp("\\\\input *(.*)\n", "g"), 
    REbib = RegExp("\\\\bibliography *{(.*).bib}"), 
    REcontents = RegExp("\\\\tableofcontents *"),
    REgraphics = RegExp("\\\\includegraphics *\\[([^\\}]*generated/[^\\}]*)\\}");

var contentsStuff = "\\makeatletter\n  \\section*{\\contentsname\n    \\@mkboth{\\MakeUppercase\\contentsname}{\\MakeUppercase\\contentsname}}\n\\makeatother";

var bufferExpand, bufferInsert, auxfile, rootfile, insertTableOfContents;

insertTableOfContents = false;
for (var i = 0; i < TeXFiles.length; i++) {
    console.log("Recursively expand all \\input, \\tableofcontents, and \\bibliography macro calls in " + TeXFiles[i]);
    rootfile = TeXFiles[i].replace(/.tex/, "");
    auxfile = rootfile+".aux";
    console.log("        \\input " + auxfile + " => automatically pre-inserted between \\makeatletter and \\makeatother\n               NB "+auxfile+" is inserted after the expanded file's own .aux file is automatically loaded (if it exists).\n               ... in other words, the expanded file's own .aux file is correctly overridden by the original "+auxfile+" file.");
    
    bufferExpand = (makenote("file", [TeXFiles[i]])).replace(/^/gm, "% ")+"\n\n";
	bufferExpand = bufferExpand + "\\makeatletter\n"+getFile(auxfile) + "\n\\makeatother\n";
    bufferExpand = bufferExpand + getFile(TeXFiles[i]); // puts in buffer
    var replaced;
    do {
        replaced = false;
        bufferExpand = bufferExpand.replace(REinput, function (match, filename) {
            replaced = true;
            console.log("        \\input " + filename);
            bufferInsert = getFile(filename);
            return "% expand " + filename + "\n" + bufferInsert + "% end expanding " + filename + "\n";
        });
        bufferExpand = bufferExpand.replace(REbib, function (match, filename) {
        	replaced = true;
            console.log("      * \\bibliography{"+filename+".bib} => replaced with " + filename+".bbl");
            bufferInsert = getFile(filename+".bbl");
            return "% expand bibliography " + filename + ".bbl\n" + bufferInsert + "\n% end expanding bibliography " + filename + ".bbl\n";
        });
        bufferExpand = bufferExpand.replace(REcontents, function (match, filename) {
        	replaced = true;
			insertTableOfContents = true;
            console.log("      * \\tableofcontents => replaced with "+ rootfile+".toc, after standard expansion of \\tableofcontents macro");
            bufferInsert = contentsStuff+getFile(rootfile+".toc");
            return "% expand table of contents " + rootfile + ".toc\n" + bufferInsert + "\n% end expanding table of contents " + rootfile + ".toc\n";
        });
    }
    while( replaced );
    if( flattenGraphics )
    {	do {   
        	replaced = false;
			cpFileCount++;
    		// remove generated/ from \includegraphics[width=\imageWidth]{generated/mathematicaplot.\imageFileSuffix}
        	bufferExpand = bufferExpand.replace(REgraphics, function (match, graphicsDetails) {
            	replaced = true;
                var gfile = graphicsDetails.replace(/.*\]\{/,"").replace(REsuffixtofix, fixedSuffix);
                cpFiles += "cp "+gfile+" "+(gfile.replace(/generated\//, expandedPrefix))+"\n";
                var expanded = ("\\includegraphics["+(graphicsDetails.replace(/generated./, expandedPrefix))+"}").replace(REsuffixtofix, ""); // fixedSuffix); // goodness knows why journal wants no extension...
                console.log("      * \\includegraphics["+graphicsDetails+"} => "+expanded);
                return "% removed generated/ from graphics pathname\n"+expanded;
            });
        }
        while( replaced );
    }
    saveFile(expandedPrefix + TeXFiles[i], bufferExpand);
    console.log("  ->  Saved as: " + expandedPrefix + TeXFiles[i] + "\n");  
}

if( insertTableOfContents )
	console.log("\nThe table of contents prefix (in the definition of \\tableofcontents, inserted before *.toc) used was:\n"+contentsStuff.replace(/^/mg, ">    ")+"\n");
	
if( flattenGraphics )
{
	console.log("\nCopy the "+cpFileCount+" graphics files to the current directory, as follows:\n");
	console.log(cpFiles);
	saveFile(expandedPrefix+"copyfiles.sh", cpFiles);
    console.log("  ->  Saved as: " + expandedPrefix+"copyfiles.sh\n"); 
    console.log("Note 1: flattenGraphics in programs/expand.js is set to "+flattenGraphics+".\n        Set flattenGraphics to false to disable this graphics file renaming feature.\n"); 
    console.log("Note 2: graphics files are copied to "+expandedPrefix+"* so all "+expandedPrefix+"* files can be easily deleted, if need be.\n");
}
